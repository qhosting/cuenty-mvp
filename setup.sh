#!/bin/bash

# =============================================================================
# CUENTY MVP - Script de Configuraci√≥n Inicial
# =============================================================================

set -e

echo "üé¨ =========================================="
echo "   CUENTY MVP - Setup Inicial"
echo "=========================================="
echo ""

# Verificar Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker no est√° instalado"
    echo "   Instala Docker: https://docs.docker.com/get-docker/"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose no est√° instalado"
    echo "   Instala Docker Compose: https://docs.docker.com/compose/install/"
    exit 1
fi

echo "‚úÖ Docker y Docker Compose instalados"
echo ""

# Crear archivo .env si no existe
if [ ! -f .env ]; then
    echo "üìù Creando archivo .env..."
    cp .env.example .env
    
    # Generar secretos aleatorios
    JWT_SECRET=$(node -e "console.log(require('crypto').randomBytes(32).toString('hex'))")
    ENCRYPTION_KEY=$(node -e "console.log(require('crypto').randomBytes(32).toString('hex'))")
    WEBHOOK_SECRET=$(node -e "console.log(require('crypto').randomBytes(16).toString('hex'))")
    DB_PASSWORD=$(node -e "console.log(require('crypto').randomBytes(16).toString('hex'))")
    
    # Reemplazar en .env
    sed -i "s|cambiar_este_secreto_por_uno_aleatorio_y_seguro_minimo_32_caracteres|$JWT_SECRET|g" .env
    sed -i "s|cambiar_esta_clave_de_encriptacion_por_una_aleatoria_segura_32_chars|$ENCRYPTION_KEY|g" .env
    sed -i "s|cambiar_secret_compartido_con_n8n|$WEBHOOK_SECRET|g" .env
    sed -i "s|cambiar_password_seguro_aqui|$DB_PASSWORD|g" .env
    
    echo "‚úÖ Archivo .env creado con secretos aleatorios"
else
    echo "‚ÑπÔ∏è  Archivo .env ya existe, omitiendo creaci√≥n"
fi

echo ""
echo "üê≥ Iniciando servicios con Docker Compose..."
docker-compose up -d

echo ""
echo "‚è≥ Esperando que los servicios est√©n listos..."
sleep 10

# Verificar salud de servicios
echo ""
echo "üîç Verificando servicios..."

if docker-compose ps | grep -q "Up"; then
    echo "‚úÖ Servicios Docker corriendo"
else
    echo "‚ùå Error: Servicios no est√°n corriendo"
    echo "   Ver logs: docker-compose logs"
    exit 1
fi

# Verificar API
if curl -s http://localhost:3000/health | grep -q "ok"; then
    echo "‚úÖ API respondiendo correctamente"
else
    echo "‚ö†Ô∏è  API a√∫n no responde, puede tardar unos segundos m√°s..."
fi

echo ""
echo "üéâ =========================================="
echo "   ¬°Configuraci√≥n Completada!"
echo "=========================================="
echo ""
echo "üìç URLs de Acceso:"
echo "   üåê Frontend Cliente:  http://localhost:3000"
echo "   üë®‚Äçüíº Panel Admin:       http://localhost:3000/admin"
echo "   üîß API:              http://localhost:3000/api"
echo ""
echo "üîê Credenciales por Defecto:"
echo "   Usuario: admin"
echo "   Password: admin123"
echo ""
echo "‚ö†Ô∏è  IMPORTANTE:"
echo "   1. Cambia las credenciales de admin en producci√≥n"
echo "   2. Revisa el archivo .env y actualiza si es necesario"
echo "   3. Configura tu dominio en producci√≥n"
echo ""
echo "üìö Comandos √ötiles:"
echo "   Ver logs:       docker-compose logs -f"
echo "   Detener:        docker-compose down"
echo "   Reiniciar:      docker-compose restart"
echo ""
echo "‚ú® ¬°Disfruta usando CUENTY!"
