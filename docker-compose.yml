
version: '3.8'

services:
  # Servicio de PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: cuenty_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-cuenty_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-cuenty_password_change_me}
      POSTGRES_DB: ${DB_NAME:-cuenty_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - cuenty_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-cuenty_user} -d ${DB_NAME:-cuenty_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Servicio de la aplicación CUENTY
  app:
    build: .
    container_name: cuenty_app
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      
      # Database - Opción 1: DATABASE_URL (Recomendado para bases de datos externas)
      # Si DATABASE_URL está definido, se usará en lugar de las variables individuales
      DATABASE_URL: ${DATABASE_URL:-}
      
      # Database - Opción 2: Variables individuales (para docker-compose interno)
      # Solo se usan si DATABASE_URL no está definido
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-cuenty_db}
      DB_USER: ${DB_USER:-cuenty_user}
      DB_PASSWORD: ${DB_PASSWORD:-cuenty_password_change_me}
      
      # Security
      JWT_SECRET: ${JWT_SECRET:-change-this-secret-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-change-this-encryption-key-in-production}
      
      # n8n Webhooks
      N8N_WEBHOOK_SECRET: ${N8N_WEBHOOK_SECRET:-change-this-webhook-secret}
      N8N_WEBHOOK_ENTREGA_CUENTA: ${N8N_WEBHOOK_ENTREGA_CUENTA:-}
      N8N_WEBHOOK_RESPUESTA_AGENTE: ${N8N_WEBHOOK_RESPUESTA_AGENTE:-}
      
      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cuenty_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  cuenty_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
