/**
 * Servicio de Notificaciones
 * Maneja el env√≠o de notificaciones por WhatsApp (Evolution API) y Email
 */

const axios = require('axios');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Configuraci√≥n de Evolution API desde variables de entorno
const EVOLUTION_API_URL = process.env.EVOLUTION_API_URL || 'http://localhost:8080';
const EVOLUTION_API_KEY = process.env.EVOLUTION_API_KEY || '';
const EVOLUTION_INSTANCE = process.env.EVOLUTION_INSTANCE || 'cuenty';

/**
 * Plantillas de mensajes para notificaciones
 */
const PLANTILLAS = {
  siete_dias: (suscripcion) => `
üîî *Recordatorio CUENTY*

¬°Hola! üëã

Tu suscripci√≥n a *${suscripcion.servicio.nombre}* - Plan *${suscripcion.plan.nombrePlan}* vencer√° en *7 d√≠as*.

üìÖ Fecha de vencimiento: ${formatearFecha(suscripcion.fechaProximaRenovacion)}

${suscripcion.renovacionAutomatica ? 
  '‚úÖ Tu suscripci√≥n se renovar√° autom√°ticamente.' : 
  '‚ö†Ô∏è Recuerda renovar tu suscripci√≥n para seguir disfrutando del servicio.'
}

¬øNecesitas ayuda? ¬°Cont√°ctanos! üí¨
  `.trim(),

  tres_dias: (suscripcion) => `
‚ö†Ô∏è *URGENTE - Suscripci√≥n por vencer*

¬°Hola! üëã

Tu suscripci√≥n a *${suscripcion.servicio.nombre}* - Plan *${suscripcion.plan.nombrePlan}* vencer√° en *3 d√≠as*.

üìÖ Fecha de vencimiento: ${formatearFecha(suscripcion.fechaProximaRenovacion)}

${suscripcion.renovacionAutomatica ? 
  '‚úÖ Tu suscripci√≥n se renovar√° autom√°ticamente.' : 
  'üö® *¬°RENUEVA PRONTO!* Evita la interrupci√≥n del servicio.'
}

Renovar ahora: ${process.env.FRONTEND_URL || 'https://cuenty.com'}/client/suscripciones

¬øNecesitas ayuda? ¬°Cont√°ctanos! üí¨
  `.trim(),

  un_dia: (suscripcion) => `
üö® *√öLTIMO AVISO - Suscripci√≥n vence ma√±ana*

¬°Hola! üëã

Tu suscripci√≥n a *${suscripcion.servicio.nombre}* - Plan *${suscripcion.plan.nombrePlan}* vencer√° *MA√ëANA*.

üìÖ Fecha de vencimiento: ${formatearFecha(suscripcion.fechaProximaRenovacion)}

${suscripcion.renovacionAutomatica ? 
  '‚úÖ Tu suscripci√≥n se renovar√° autom√°ticamente ma√±ana.' : 
  'üî¥ *¬°RENUEVA AHORA!* Tu servicio se interrumpir√° ma√±ana si no renuevas.'
}

Renovar ahora: ${process.env.FRONTEND_URL || 'https://cuenty.com'}/client/suscripciones

¬øNecesitas ayuda? ¬°Cont√°ctanos! üí¨
  `.trim(),

  vencido: (suscripcion) => `
‚ùå *Suscripci√≥n Vencida*

¬°Hola! üëã

Tu suscripci√≥n a *${suscripcion.servicio.nombre}* - Plan *${suscripcion.plan.nombrePlan}* ha *VENCIDO*.

üìÖ Fecha de vencimiento: ${formatearFecha(suscripcion.fechaProximaRenovacion)}

üîÑ *Renueva ahora* para recuperar el acceso a tu servicio:
${process.env.FRONTEND_URL || 'https://cuenty.com'}/client/suscripciones

¬øNecesitas ayuda? ¬°Cont√°ctanos! üí¨
  `.trim()
};

/**
 * Formatear fecha para mostrar en mensajes
 */
function formatearFecha(fecha) {
  const date = new Date(fecha);
  const opciones = { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric',
    timeZone: 'America/Mexico_City'
  };
  return date.toLocaleDateString('es-MX', opciones);
}

/**
 * Obtener plantilla de mensaje seg√∫n tipo de notificaci√≥n
 */
function obtenerPlantillaNotificacion(tipo, suscripcion) {
  const plantilla = PLANTILLAS[tipo];
  if (!plantilla) {
    throw new Error(`Tipo de notificaci√≥n no v√°lido: ${tipo}`);
  }
  return plantilla(suscripcion);
}

/**
 * Enviar notificaci√≥n por WhatsApp usando Evolution API
 */
async function enviarNotificacionWhatsApp(numero, mensaje) {
  try {
    // Validar configuraci√≥n
    if (!EVOLUTION_API_KEY) {
      console.warn('‚ö†Ô∏è EVOLUTION_API_KEY no configurado - notificaci√≥n simulada');
      return { success: true, simulated: true };
    }

    // Formatear n√∫mero (asegurar que tenga formato internacional)
    const numeroFormateado = numero.startsWith('+') ? numero : `+${numero}`;

    // Enviar mensaje
    const response = await axios.post(
      `${EVOLUTION_API_URL}/message/sendText/${EVOLUTION_INSTANCE}`,
      {
        number: numeroFormateado,
        text: mensaje
      },
      {
        headers: {
          'apikey': EVOLUTION_API_KEY,
          'Content-Type': 'application/json'
        },
        timeout: 10000 // 10 segundos
      }
    );

    console.log(`‚úÖ WhatsApp enviado a ${numeroFormateado}`);
    return { success: true, data: response.data };

  } catch (error) {
    console.error('‚ùå Error al enviar WhatsApp:', error.message);
    throw new Error(`Error al enviar WhatsApp: ${error.message}`);
  }
}

/**
 * Enviar notificaci√≥n por Email
 * TODO: Implementar servicio de email (NodeMailer, SendGrid, etc.)
 */
async function enviarNotificacionEmail(email, asunto, mensaje) {
  try {
    console.log(`üìß Email a enviar a: ${email}`);
    console.log(`Asunto: ${asunto}`);
    console.log(`Mensaje: ${mensaje.substring(0, 100)}...`);
    
    // TODO: Implementar env√≠o real de email
    console.warn('‚ö†Ô∏è Servicio de email no implementado - notificaci√≥n simulada');
    
    return { success: true, simulated: true };

  } catch (error) {
    console.error('‚ùå Error al enviar email:', error.message);
    throw new Error(`Error al enviar email: ${error.message}`);
  }
}

/**
 * Crear registro de notificaci√≥n en la base de datos
 */
async function crearNotificacionVencimiento(suscripcionId, tipo, enviada = false, canal = null, error = null) {
  try {
    const notificacion = await prisma.notificacionVencimiento.create({
      data: {
        suscripcionId,
        tipo,
        enviada,
        canal,
        fechaEnvio: enviada ? new Date() : null,
        error
      }
    });

    return notificacion;

  } catch (error) {
    console.error('‚ùå Error al crear notificaci√≥n:', error.message);
    throw error;
  }
}

/**
 * Enviar notificaci√≥n de vencimiento a un cliente
 */
async function enviarNotificacionVencimiento(suscripcionId, tipo) {
  try {
    // Obtener suscripci√≥n con relaciones
    const suscripcion = await prisma.suscripcion.findUnique({
      where: { id: suscripcionId },
      include: {
        cliente: true,
        servicio: true,
        plan: true
      }
    });

    if (!suscripcion) {
      throw new Error('Suscripci√≥n no encontrada');
    }

    // Verificar si ya se envi√≥ notificaci√≥n de este tipo
    const notificacionExistente = await prisma.notificacionVencimiento.findFirst({
      where: {
        suscripcionId,
        tipo,
        enviada: true
      }
    });

    if (notificacionExistente) {
      console.log(`‚ö†Ô∏è Notificaci√≥n ${tipo} ya enviada para suscripci√≥n ${suscripcionId}`);
      return { success: false, message: 'Notificaci√≥n ya enviada' };
    }

    // Obtener mensaje de la plantilla
    const mensaje = obtenerPlantillaNotificacion(tipo, suscripcion);

    let resultadoEnvio = null;
    let canal = null;
    let error = null;

    // Intentar enviar por WhatsApp primero
    if (suscripcion.cliente.whatsapp) {
      try {
        await enviarNotificacionWhatsApp(suscripcion.cliente.whatsapp, mensaje);
        canal = 'whatsapp';
        resultadoEnvio = { success: true };
      } catch (err) {
        console.error(`‚ùå Error al enviar WhatsApp: ${err.message}`);
        error = err.message;
      }
    }

    // Si WhatsApp falla o no est√° disponible, intentar email
    if (!resultadoEnvio && suscripcion.cliente.email) {
      try {
        await enviarNotificacionEmail(
          suscripcion.cliente.email,
          `CUENTY - Recordatorio de vencimiento`,
          mensaje
        );
        canal = 'email';
        resultadoEnvio = { success: true };
      } catch (err) {
        console.error(`‚ùå Error al enviar email: ${err.message}`);
        error = error ? `${error}; ${err.message}` : err.message;
      }
    }

    // Registrar notificaci√≥n en la base de datos
    await crearNotificacionVencimiento(
      suscripcionId,
      tipo,
      resultadoEnvio?.success || false,
      canal,
      error
    );

    if (resultadoEnvio?.success) {
      console.log(`‚úÖ Notificaci√≥n ${tipo} enviada exitosamente por ${canal} para suscripci√≥n ${suscripcionId}`);
      return { success: true, canal, tipo };
    } else {
      console.error(`‚ùå No se pudo enviar notificaci√≥n ${tipo} para suscripci√≥n ${suscripcionId}`);
      return { success: false, error };
    }

  } catch (error) {
    console.error('‚ùå Error al enviar notificaci√≥n de vencimiento:', error);
    throw error;
  }
}

/**
 * Verificar si una notificaci√≥n ya fue enviada
 */
async function verificarNotificacionEnviada(suscripcionId, tipo) {
  try {
    const notificacion = await prisma.notificacionVencimiento.findFirst({
      where: {
        suscripcionId,
        tipo,
        enviada: true
      }
    });

    return !!notificacion;

  } catch (error) {
    console.error('‚ùå Error al verificar notificaci√≥n:', error);
    return false;
  }
}

module.exports = {
  enviarNotificacionWhatsApp,
  enviarNotificacionEmail,
  crearNotificacionVencimiento,
  obtenerPlantillaNotificacion,
  enviarNotificacionVencimiento,
  verificarNotificacionEnviada
};
