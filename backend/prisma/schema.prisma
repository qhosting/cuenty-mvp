generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admins {
  id             Int       @id @default(autoincrement())
  username       String    @unique @db.VarChar(50)
  password       String    @db.VarChar(255)
  email          String?   @db.VarChar(100)
  fecha_creacion DateTime  @default(now())
  ordenes        ordenes[]
}

model clientes {
  id                     Int             @id @default(autoincrement())
  email                  String          @unique @db.VarChar(100)
  password               String          @db.VarChar(255)
  nombre                 String          @db.VarChar(100)
  apellido               String          @db.VarChar(100)
  telefono               String?         @db.VarChar(15)
  whatsapp               String?         @db.VarChar(15)
  email_verificado       Boolean         @default(false)
  activo                 Boolean         @default(true)
  fecha_creacion         DateTime        @default(now())
  fecha_actualizacion    DateTime
  ultimo_acceso          DateTime?
  reset_password_token   String?         @db.VarChar(255)
  reset_password_expires DateTime?
  ordenes                ordenes[]
  suscripciones          suscripciones[]

  @@index([activo], map: "idx_clientes_activo")
  @@index([email], map: "idx_clientes_email")
}

model inventario_cuentas {
  id_cuenta               Int             @id @default(autoincrement())
  id_plan                 Int
  correo_encriptado       String
  contrasena_encriptada   String
  perfil                  String?         @db.VarChar(50)
  pin                     String?         @db.VarChar(10)
  notas                   String?
  estado                  EstadoCuenta    @default(disponible)
  fecha_agregado          DateTime        @default(now())
  fecha_ultima_asignacion DateTime?
  service_plans           service_plans   @relation(fields: [id_plan], references: [id_plan])
  order_items             order_items[]
  suscripciones           suscripciones[]

  @@index([id_plan, estado], map: "idx_inventario_plan_estado")
}

model notificaciones_vencimiento {
  id             Int                @id @default(autoincrement())
  suscripcion_id Int
  tipo           TipoNotificacion
  enviada        Boolean            @default(false)
  fecha_envio    DateTime?
  canal          CanalNotificacion?
  error          String?
  created_at     DateTime           @default(now())
  suscripciones  suscripciones      @relation(fields: [suscripcion_id], references: [id], onDelete: Cascade)

  @@index([suscripcion_id], map: "idx_notificaciones_suscripcion")
  @@index([tipo, enviada], map: "idx_notificaciones_tipo_enviada")
}

model ordenes {
  id_orden             Int             @id @default(autoincrement())
  celular_usuario      String          @db.VarChar(15)
  monto_total          Decimal         @db.Decimal(10, 2)
  estado               EstadoOrden     @default(pendiente_pago)
  metodo_pago          String          @default("transferencia_bancaria") @db.VarChar(50)
  metodo_entrega       String          @default("whatsapp") @db.VarChar(20)
  instrucciones_pago   String?
  notas_admin          String?
  fecha_creacion       DateTime        @default(now())
  fecha_pago           DateTime?
  fecha_entrega        DateTime?
  datos_pago           Json?
  payment_confirmed_at DateTime?
  payment_confirmed_by Int?
  payment_status       PaymentStatus   @default(pending)
  cliente_id           Int?
  usuarios             usuarios        @relation(fields: [celular_usuario], references: [celular])
  clientes             clientes?       @relation(fields: [cliente_id], references: [id])
  admins               admins?         @relation(fields: [payment_confirmed_by], references: [id])
  order_items          order_items[]
  suscripciones        suscripciones[]

  @@index([cliente_id], map: "idx_ordenes_cliente")
  @@index([estado], map: "idx_ordenes_estado")
  @@index([fecha_creacion(sort: Desc)], map: "idx_ordenes_fecha")
  @@index([payment_status], map: "idx_ordenes_payment_status")
  @@index([celular_usuario], map: "idx_ordenes_usuario")
}

model order_items {
  id_order_item              Int                 @id @default(autoincrement())
  id_orden                   Int
  id_plan                    Int
  id_cuenta_asignada         Int?
  cantidad                   Int                 @default(1)
  precio_unitario            Decimal             @db.Decimal(10, 2)
  subtotal                   Decimal             @db.Decimal(10, 2)
  estado                     EstadoOrderItem     @default(pendiente)
  fecha_vencimiento_servicio DateTime?
  credenciales_entregadas    Boolean             @default(false)
  fecha_creacion             DateTime            @default(now())
  inventario_cuentas         inventario_cuentas? @relation(fields: [id_cuenta_asignada], references: [id_cuenta])
  ordenes                    ordenes             @relation(fields: [id_orden], references: [id_orden], onDelete: Cascade)
  service_plans              service_plans       @relation(fields: [id_plan], references: [id_plan])

  @@index([id_orden], map: "idx_order_items_orden")
  @@index([id_plan], map: "idx_order_items_plan")
}

model payment_instructions {
  id                        Int      @id @default(autoincrement())
  banco                     String   @db.VarChar(100)
  titular                   String   @db.VarChar(200)
  numero_cuenta             String?  @db.VarChar(50)
  clabe                     String?  @db.VarChar(18)
  concepto_referencia       String?
  instrucciones_adicionales String?
  activo                    Boolean  @default(true)
  fecha_creacion            DateTime @default(now())
}

model phone_verifications {
  id             Int      @id @default(autoincrement())
  celular        String   @db.VarChar(15)
  codigo         String   @db.VarChar(6)
  expiracion     DateTime
  usado          Boolean  @default(false)
  intentos       Int      @default(0)
  fecha_creacion DateTime @default(now())

  @@index([celular], map: "idx_phone_verifications_celular")
  @@index([codigo], map: "idx_phone_verifications_codigo")
}

model service_plans {
  id_plan            Int                  @id @default(autoincrement())
  id_servicio        Int
  nombre_plan        String               @db.VarChar(100)
  duracion_meses     Int
  duracion_dias      Int?
  costo              Decimal              @db.Decimal(10, 2)
  margen_ganancia    Decimal              @default(0) @db.Decimal(10, 2)
  precio_venta       Decimal?             @db.Decimal(10, 2)
  descripcion        String?
  activo             Boolean              @default(true)
  fecha_creacion     DateTime             @default(now())
  inventario_cuentas inventario_cuentas[]
  order_items        order_items[]
  servicios          servicios            @relation(fields: [id_servicio], references: [id_servicio], onDelete: Cascade)
  shopping_cart      shopping_cart[]
  suscripciones      suscripciones[]

  @@unique([id_servicio, duracion_meses])
  @@index([activo], map: "idx_service_plans_activo")
  @@index([id_servicio], map: "idx_service_plans_servicio")
}

model servicios {
  id_servicio    Int             @id @default(autoincrement())
  nombre         String          @db.VarChar(100)
  descripcion    String?
  logo_url       String?
  categoria      String          @default("streaming") @db.VarChar(50)
  activo         Boolean         @default(true)
  fecha_creacion DateTime        @default(now())
  service_plans  service_plans[]
  suscripciones  suscripciones[]
}

model shopping_cart {
  id_cart_item    Int           @id @default(autoincrement())
  celular_usuario String        @db.VarChar(15)
  id_plan         Int
  cantidad        Int           @default(1)
  fecha_agregado  DateTime      @default(now())
  usuarios        usuarios      @relation(fields: [celular_usuario], references: [celular], onDelete: Cascade)
  service_plans   service_plans @relation(fields: [id_plan], references: [id_plan])

  @@unique([celular_usuario, id_plan])
  @@index([celular_usuario], map: "idx_shopping_cart_usuario")
}

model suscripciones {
  id                         Int                          @id @default(autoincrement())
  cliente_id                 Int
  servicio_id                Int
  plan_id                    Int
  orden_id                   Int?
  cuenta_id                  Int?
  estado                     EstadoSuscripcion            @default(activa)
  fecha_inicio               DateTime                     @default(now())
  fecha_proxima_renovacion   DateTime
  fecha_cancelacion          DateTime?
  fecha_ultima_renovacion    DateTime?
  renovacion_automatica      Boolean                      @default(false)
  metodoPago                 String?                      @db.VarChar(50)
  notas_admin                String?
  motivo_cancelacion         String?
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime
  notificaciones_vencimiento notificaciones_vencimiento[]
  clientes                   clientes                     @relation(fields: [cliente_id], references: [id], onDelete: Cascade)
  inventario_cuentas         inventario_cuentas?          @relation(fields: [cuenta_id], references: [id_cuenta])
  ordenes                    ordenes?                     @relation(fields: [orden_id], references: [id_orden])
  service_plans              service_plans                @relation(fields: [plan_id], references: [id_plan])
  servicios                  servicios                    @relation(fields: [servicio_id], references: [id_servicio])

  @@index([cliente_id], map: "idx_suscripciones_cliente")
  @@index([estado], map: "idx_suscripciones_estado")
  @@index([fecha_proxima_renovacion], map: "idx_suscripciones_proxima_renovacion")
  @@index([servicio_id], map: "idx_suscripciones_servicio")
}

model ticket_mensajes {
  id_mensaje     Int             @id @default(autoincrement())
  id_ticket      Int
  remitente      RemitenteTicket
  cuerpo_mensaje String
  timestamp      DateTime        @default(now())
  tickets        tickets         @relation(fields: [id_ticket], references: [id_ticket], onDelete: Cascade)

  @@index([id_ticket], map: "idx_ticket_mensajes_ticket")
  @@index([timestamp(sort: Desc)], map: "idx_ticket_mensajes_timestamp")
}

model tickets {
  id_ticket                  Int               @id @default(autoincrement())
  celular_usuario            String            @db.VarChar(15)
  titulo_problema            String
  estado                     EstadoTicket      @default(abierto)
  fecha_creacion             DateTime          @default(now())
  fecha_ultima_actualizacion DateTime          @default(now())
  ticket_mensajes            ticket_mensajes[]
  usuarios                   usuarios          @relation(fields: [celular_usuario], references: [celular])

  @@index([celular_usuario], map: "idx_tickets_celular")
  @@index([estado], map: "idx_tickets_estado")
  @@index([fecha_creacion(sort: Desc)], map: "idx_tickets_fecha")
}

model usuarios {
  celular                  String          @id @db.VarChar(15)
  nombre                   String?         @db.VarChar(100)
  email                    String?         @db.VarChar(100)
  password                 String?         @db.VarChar(255)
  verificado               Boolean         @default(false)
  metodo_entrega_preferido String          @default("whatsapp") @db.VarChar(20)
  fecha_creacion           DateTime        @default(now())
  ultimo_acceso            DateTime?
  ordenes                  ordenes[]
  shopping_cart            shopping_cart[]
  tickets                  tickets[]
}

enum CanalNotificacion {
  whatsapp
  email
}

enum EstadoCuenta {
  disponible
  asignada
  mantenimiento
  bloqueada
}

enum EstadoOrden {
  pendiente
  pendiente_pago
  pagada
  en_proceso
  entregada
  cancelada
}

enum EstadoOrderItem {
  pendiente
  asignada
  entregada
}

enum EstadoSuscripcion {
  activa
  pausada
  cancelada
  vencida
}

enum EstadoTicket {
  abierto
  en_proceso
  resuelto
  cerrado
}

enum PaymentStatus {
  pending
  confirmed
  failed
}

enum RemitenteTicket {
  usuario
  agente
}

enum TipoNotificacion {
  siete_dias
  tres_dias
  un_dia
  vencido
}
