# ============================================
# CONFIGURACIÓN DE BASE DE DATOS
# ============================================

# OPCIÓN 1: DATABASE_URL (Recomendado para contenedores y despliegues)
# Esta es la forma preferida de configurar la conexión a la base de datos.
# Formato: postgresql://usuario:contraseña@host:puerto/nombre_db?parametros
# Ejemplo para conexión entre contenedores Docker:
DATABASE_URL=postgresql://postgres:51056d26ddf0ddbbc77a@cloudmx_cuenty-db:5432/cuenty-db?sslmode=disable

# OPCIÓN 2: Variables individuales (Fallback)
# Si DATABASE_URL no está definida, se usarán estas variables individuales.
# Útil para desarrollo local o entornos que no soporten DATABASE_URL.

# DB_HOST=localhost
# DB_PORT=5432
# DB_NAME=cuenty_db
# DB_USER=postgres
# DB_PASSWORD=postgres

# ============================================
# NOTAS IMPORTANTES
# ============================================
# 
# 1. Prioridad: Si DATABASE_URL está definida, las variables individuales 
#    (DB_HOST, DB_PORT, etc.) serán ignoradas.
#
# 2. Conexión entre contenedores Docker: Usar el nombre del contenedor 
#    como host (ej: cloudmx_cuenty-db) en lugar de localhost.
#
# 3. SSL Mode: Agregar ?sslmode=disable a la URL si la base de datos 
#    no requiere SSL (común en entornos de desarrollo y Docker).
#
# 4. Seguridad: NUNCA commitear el archivo .env con credenciales reales.
#    Este archivo (.env.example) es solo una plantilla.
#
# ============================================
# OTRAS VARIABLES DE ENTORNO
# ============================================

# Puerto del servidor backend
PORT=3001

# Entorno de ejecución (development, production, test)
NODE_ENV=development

# JWT Secret para autenticación (cambiar en producción)
JWT_SECRET=tu_secreto_super_seguro_aqui

# Configuración de CORS (separar múltiples orígenes con comas)
CORS_ORIGIN=http://localhost:3000,http://localhost:5173
